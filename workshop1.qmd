---
title: "R Workshop (Part 1)"
subtitle: "Introduction to R for COGNIZE Lab at ISBTI"
author: "Joern Alexander Quent"
date: "2023-12-27"
date-format: long
format: revealjs
editor: visual
---

```{r setup, include = FALSE, message = FALSE, warnings = FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

# The R Workshop

## Today's topics
::: incremental
1. The R universe: R, Rstudio, RMarkdown etc.
2. Main variable types & functions
3. How to comment in R(Studio)
4. Summary stats: mean, sd etc.
5. Installing packages from CRAN and from GitHub
6. Loading & saving various data
:::

## Possible future topics
::: columns
::: {.column width="50%"}
-   Linear algebra in R
-   Bayesian stats brms and BayesFactor
-   Working with strings
-   Using R via command line
-   Using R for file operations
-   Using system() in R
:::

::: {.column width="50%"}
-   RMarkdown chunks
-   Using ggplot2 for visualisation
-   fMRI analysis using `ciftiTools`
-   Creating packages
-   Running large jobs local
-   Using the HPC with R and RSlurm
:::
:::

## Where to find material {.smaller}
-   *Using RMarkdown to create scientific manuscripts* can be found under: [https://github.com/JAQuent/methodsDay2017](https://github.com/JAQuent/methodsDay2017)
-   List of available books (no recommendations):
    - Dalgaard - Introductory Statistics with R
    - Field - Discovering Statistics Using R
    - Kerns - Introduction to Probability and Statistics Using R
    - Navarro - Learning Statistics With R
- Most books are probably only suited for absolute beginners.
- Use help function e.g. `help(rnorm)`.
- If you already know basic programming use google "R + your question" or some AI chatbot. 
- Slides, code etc. from this workshop: [https://github.com/JAQuent/alexs_R_workshop](https://github.com/JAQuent/alexs_R_workshop)
    
## 1. The R universe 
::: incremental
- The programming language is called __R__ similar to Python or Matlab. 
- __Rstudio__ is an integrated development environment (IDE). 
- __RMarkdown__ can be used to combine data analysis and production of documents, presentations etc. 
  - Most importantly it allows you to have code alongside text i.e. perfect for notebooks and _reproducible_ analyses.

:::

## 2. Main variable types & functions {.smaller}
In R you can use `<-` as well as `=` to assign things to variables. There are [small differences](https://stackoverflow.com/questions/6140694/is-there-a-technical-difference-between-and) and it often recommended to use `<-`.

In R we have various types of variables:
```{r}
# Numbers
a <- 1.3

# Vectors (a simple list)
b <- c(1, 2, 3, 5, 6, 7) # We can do the same with b <- 1:7
```

By the way `c()` can also be used to __concatenate__ vectors. For instance,

```{r}
c1 <- c(a, b)
c1
```

Because of this `c` is __not__ a good variable name.

In contrast to Matlab, R is __not a headache__ when working with strings. 

```{r}
d <- "Hello World"
```

## 2. Main variable types & functions {.smaller}
R's probably most useful type is the __data frame__ because it will be heavily used for visualisation and data analysis.

```{r}
# Seed to get the same result everytime (important when dealing with random stuff)
set.seed(20231227)

# Create data frame
n <- 100 # Number of subjects
e <- data.frame(V1 = rnorm(n)) # Draw from a N(0, 1) distribution

# Add another column using $
e$V2 <- 3.2 + 0.4 * e$V1

# Give better names to the data frame
names(e) <- c("memory_score", "BOLD_signal") 

# Look at the first rows of the data frames
head(e)
```

## 2. Main variable types & functions {.smaller}
We also the matrix that can be used for linear algebra

```{r}
f <- matrix(1:10, nrow = 2, ncol = 5, byrow = TRUE)
f
```

A list can be used for more complex structures including nested lists. 

```{r}
h <- list(a = a, f = f)
h
```

## 2. Main variable types & functions {.smaller}
We can access entry of vectors, data frames, matrices and lists in various ways.

```{r}
# Data frame: first row
e[1, ]

# Matrix: particular entry
f[2, 4]

# List: Second entry
h[[2]]
```


## 2. Main variable types & functions {.smaller}
If you want to concatenate a large number of data frames __DON'T__ use rbind(). 

```{r eval = FALSE}
results <- rbind(results, data.frame(x = a, y = b))
# vs. 
results[[i]] <- data.frame(x = a, y = b) 
```

To go from list to df we can use rbindlist() from data.table.

![](images/rbind_vs_list.png)

## 2. Main variable types & functions {.smaller}
One of the most important functions are __loops__ and __if-statements__. They are pretty simple in R.

For Loops:

```{r}
# Number of iterations
nIter <- 10
g     <- c()

# The loop
for(i in 1:nIter){
  g[i] <- mean(rnorm(10))
}

g
```
## 2. Main variable types & functions {.smaller}

While loops:

```{r}
# Number of iterations
nIter <- 10
i     <- 1
g     <- c()

# The loop
while(i <= nIter){
  g[i] <- mean(rnorm(10))
  i <- i + 1
}

g
```
## 2. Main variable types & functions {.smaller}
If-statements:

```{r}
var1 <- 0.3

if(var1 < 0.1){
  # Something
  var2 <- 1
} else if(var1 == 0.4){
  # Something
    var2 <- 2
} else {
 # Something 
    var2 <- 3
}
var2
```
Custom functions are created like this

```{r}
our_function <- function(x){
  return(x + 1)
}

our_function(10)
```



## 3. How to comment in R(Studio) {.smaller}
```{r}
# Simple comment

# /* 
# ----------------------------- Comment that helps organising sections ---------------------------
# */
```

We can use comments not only to make our __code understandable__ to later version of ourselves and other people but certain comment formats can also be useful navigation the scripts in RStudio. 

![](images/comments.png)

## 4. Summary stats: mean, sd etc. {.smaller}
Summary are all part of the base package

```{r}
# Create variable
var3 <- rnorm(100, 4.2, 10)

# Summary statistics
mean(var3)
median(var3)
sd(var3)
var(var3)
min(var3)
max(var3)
summary(var3)
```

## 5. Installing packages from CRAN and from GitHub {.smaller}
Packages are mostly installed from CRAN aka _Comprehensive R Archive Network_. 

```{r}
# install.packages("devtools")
```

but we can also install from GitHub e.g.

```{r}
# devtools::install_github("JAQuent/assortedRFunctions", upgrade = "never")
```

## 6. Saving and loading various data {.smaller}

There are several ways to save data:

```{r}
# Tab-separated
write.table(e, file = "data/tab_sep_data.txt", sep = "\t", row.names = FALSE, quote = FALSE)

# Comma-separated
write.csv(e, file = "data/comma_sep_data.csv", row.names = FALSE, quote = FALSE)

# Save the variable
save(e, file = "data/only_e.RData")

# Save everything in the workspace
save.image(file = "data/workspace.RData")
```

## 6. Saving and loading various data {.smaller}

We can read data in in several ways:

```{r}
# Tab-separated
tsv <- read.table("data/tab_sep_data.txt", header = TRUE)
head(tsv)

# Comma-separated
csv <- read.csv("data/comma_sep_data.csv")
head(csv)

# .RData
load("data/workspace.RData")
```

Note you can also directly read other types of data (e.g. Excel spreadsheets or Matlab .m files) if you use the correct functions/packages. 

# The end

